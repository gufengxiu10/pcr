#运行用户  
#user  nobody;

#启动进程，通常设置成和cpu的数量相等或者2倍于cpu的个数(具体结合cpu和内存)。默认为1  
worker_processes  1;

#全局的错误日志和日志级别[ debug | info | notice | warn | error | crit ] 
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid进程文件 
#pid        logs/nginx.pid;

#工作模式以及连接数上限 
events {
    worker_connections  1024;
}

http {
    #设定mime类型,类型由mime.type文件定义。文件扩展名与文件类型映射表
    include       mime.types;
    #默认文件类型     
    default_type  application/octet-stream;

    client_max_body_size 200m;
    #设定日志格式  
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access日志文件的路径,采用上面定义的main 格式记录  
    #access_log  logs/access.log  main;

    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，  
    #对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，  
    #以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。默认开启状态
    sendfile        on;
    
    #防止网络阻塞  
    #tcp_nopush     on;

    #长连接超时时间，单位是秒 
    #keepalive_timeout  0;
    keepalive_timeout  300;

    #开启gzip压缩输出 
    #gzip  on;  
    upstream python_server {
        server 172.200.1.5:4001;
    }

    server {
        listen       80;
        server_name  pixb.com;
        
        access_log /var/log/nginx/default.access.log;
        error_log /var/log/nginx/default.error.log;

        location / {
            proxy_pass http://python_server;
        }
    }
}
